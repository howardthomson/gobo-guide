	emit_internal_routine (a_feature: ET_INTERNAL_ROUTINE; a_static: BOOLEAN; a_creation: BOOLEAN) is
			-- Print `a_feature' to `current_file' and its signature to `header_file'.
--		require
--			a_feature_not_void: a_feature /= Void
--			valid_feature: current_feature.static_feature = a_feature
--			is_static: a_static implies current_feature.is_static
--			is_creation: a_creation implies current_feature.is_creation
		local
			l_result_type_set: ET_DYNAMIC_TYPE_SET
			l_result_type: ET_DYNAMIC_TYPE
			l_argument_type_set: ET_DYNAMIC_TYPE_SET
			l_argument_type: ET_DYNAMIC_TYPE
			l_arguments: ET_FORMAL_ARGUMENT_LIST
			l_once_feature: ET_FEATURE
			i, nb_args: INTEGER
			l_comma: BOOLEAN
			old_file: KI_TEXT_OUTPUT_STREAM
			l_name: ET_IDENTIFIER
			l_locals: ET_LOCAL_VARIABLE_LIST

			l_llvm_routine: LLVM_ROUTINE
		do
			old_file := current_file
			current_file := current_function_header_buffer

			print_feature_name_comment (a_feature, current_type, current_file)

			l_result_type_set := current_feature.result_type_set
			if l_result_type_set /= Void then
				l_result_type := l_result_type_set.static_type
			end

			if a_feature.is_once then
					-- This is a once-feature. Print the boolean status variable
					-- for this once, and its computed value variable for queries,
					-- to `header_file' and `current_file' if not already done.
				l_once_feature := a_feature.implementation_feature
				if not once_features.has (l_once_feature) then
					once_features.force_last (l_once_feature)

				--	current_file.put_string (c_unsigned)
				--	current_file.put_character (' ')
				--	current_file.put_string (c_char)
				--	current_file.put_character (' ')
				--	print_once_status_name (l_once_feature, current_file)
				--	current_file.put_character (' ')
				--	current_file.put_character ('=')
				--	current_file.put_character (' ')
				--	current_file.put_character ('%'')
				--	current_file.put_character ('\')
				--	current_file.put_character ('0')
				--	current_file.put_character ('%'')
				--	current_file.put_character (';')
				--	current_file.put_new_line

					llvm_mc.new_labelled_data_byte (once_status_name (l_once_feature))

					if l_result_type /= Void then

					--	print_type_declaration (l_result_type, current_file)
					--	current_file.put_character (' ')
					--	print_once_value_name (l_once_feature, current_file)
					--	current_file.put_character (';')
					--	current_file.put_new_line

						llvm_mc.new_typed_global (
					end
				end
			end
				-- Allocate code entry address
			llvm.TODO

			l_arguments := a_feature.arguments
			if l_arguments /= Void then
				nb_args := l_arguments.count
			end

			if a_static then
				print_static_routine_name (current_feature, current_type, header_file)
				print_static_routine_name (current_feature, current_type, current_file)
				header_file.put_character ('(')
				current_file.put_character ('(')
				if exception_trace_mode then
					header_file.put_string (c_ge_call)
					header_file.put_character ('*')
					header_file.put_character (' ')
					header_file.put_string (c_ac)
					current_file.put_string (c_ge_call)
					current_file.put_character ('*')
					current_file.put_character (' ')
					current_file.put_string (c_ac)
					l_comma := True
				elseif nb_args = 0 then
					header_file.put_string (c_void)
					current_file.put_string (c_void)
				end
			elseif a_creation then
				print_creation_procedure_name (current_feature, current_type, header_file)
				print_creation_procedure_name (current_feature, current_type, current_file)
				header_file.put_character ('(')
				current_file.put_character ('(')
				if exception_trace_mode then
					header_file.put_string (c_ge_call)
					header_file.put_character ('*')
					header_file.put_character (' ')
					header_file.put_string (c_ac)
					current_file.put_string (c_ge_call)
					current_file.put_character ('*')
					current_file.put_character (' ')
					current_file.put_string (c_ac)
					l_comma := True
				elseif nb_args = 0 then
					header_file.put_string (c_void)
					current_file.put_string (c_void)
				end
			else
				print_routine_name (current_feature, current_type, header_file)
				print_routine_name (current_feature, current_type, current_file)
				header_file.put_character ('(')
				current_file.put_character ('(')
				if exception_trace_mode then
					header_file.put_string (c_ge_call)
					header_file.put_character ('*')
					header_file.put_character (' ')
					header_file.put_string (c_ac)
					header_file.put_character (',')
					header_file.put_character (' ')
					current_file.put_string (c_ge_call)
					current_file.put_character ('*')
					current_file.put_character (' ')
					current_file.put_string (c_ac)
					current_file.put_character (',')
					current_file.put_character (' ')
				end
				print_type_declaration (current_type, header_file)
				print_type_declaration (current_type, current_file)
				if current_type.is_expanded then
					header_file.put_character ('*')
					current_file.put_character ('*')
				end
				header_file.put_character (' ')
				current_file.put_character (' ')
				print_current_name (header_file)
				print_current_name (current_file)
				l_comma := True
			end
			if nb_args > 0 then
				from i := 1 until i > nb_args loop
					if l_comma then
						header_file.put_character (',')
						current_file.put_character (',')
						header_file.put_character (' ')
						current_file.put_character (' ')
					else
						l_comma := True
					end
					l_argument_type_set := argument_type_set (i)
					l_argument_type := l_argument_type_set.static_type
					print_type_declaration (l_argument_type, header_file)
					print_type_declaration (l_argument_type, current_file)
					header_file.put_character (' ')
					current_file.put_character (' ')
					l_name := l_arguments.formal_argument (i).name
					print_argument_name (l_name, header_file)
					print_argument_name (l_name, current_file)
					i := i + 1
				end
			end
			header_file.put_character (')')
			current_file.put_character (')')
			header_file.put_character (';')
			header_file.put_new_line
			current_file.put_new_line
				--
				-- Print body to `current_file'.
				--
			current_file.put_character ('{')
			current_file.put_new_line
			indent
			l_locals := a_feature.locals
			if enable_locals_as_struct
			and then (enable_ge_stack_trace
				or else (l_result_type /= Void or (l_locals /= Void and then l_locals.count /= 0))) then
					-- Enclose locals declarations in a 'C' struct
					-- to enable stack-tracing + GC etc
				print_indentation
				current_file.put_character ('s')
				current_file.put_character ('t')
				current_file.put_character ('r')
				current_file.put_character ('u')
				current_file.put_character ('c')
				current_file.put_character ('t')
				current_file.put_character (' ')
				current_file.put_character ('{')
				current_file.put_new_line
				indent
				in_locals_declaration := True
				-- .....
			end
			if enable_ge_stack_trace then
				print_indentation
				current_file.put_string (once "void *ge_caller;")	-- Pointer to previous locals struct
				current_file.put_new_line
				print_indentation
				current_file.put_string (once "void *ge_current;")
				current_file.put_new_line
			end
			current_file := current_function_body_buffer
			print_feature_trace_message_call (True)
			if a_creation then
				print_malloc_current (a_feature)
			end
			if l_once_feature /= Void then
				print_indentation
				current_file.put_string (c_if)
				current_file.put_character (' ')
				current_file.put_character ('(')
				print_once_status_name (l_once_feature, current_file)
				current_file.put_character (')')
				current_file.put_character (' ')
				current_file.put_character ('{')
				current_file.put_new_line
				indent
				print_indentation
				current_file.put_string (c_return)
				if l_result_type_set /= Void then
					current_file.put_character (' ')
					print_once_value_name (l_once_feature, current_file)
				end
				current_file.put_character (';')
				current_file.put_new_line
				dedent
				print_indentation
				current_file.put_character ('}')
				current_file.put_character (' ')
				current_file.put_string (c_else)
				current_file.put_character (' ')
				current_file.put_character ('{')
				current_file.put_new_line
				indent
				print_indentation
				print_once_status_name (l_once_feature, current_file)
				current_file.put_character (' ')
				current_file.put_character ('=')
				current_file.put_character (' ')
				current_file.put_character ('%'')
				current_file.put_character ('\')
				current_file.put_character ('1')
				current_file.put_character ('%'')
				current_file.put_character (';')
				current_file.put_new_line
				if l_result_type /= Void then
						-- The following is to make sure that if a once-function is called
						-- recursively, the semantics specified by ECMA will be satisfied.
						-- ECMA 367-2 section 8.23.22 page 124 says that the recursive calls
						-- to the once-function should return the value of 'Result' as it
						-- was when the recursive calls occurred.
					print_indentation
					print_once_value_name (l_once_feature, current_file)
					current_file.put_character (' ')
					current_file.put_character ('=')
					current_file.put_character (' ')
					print_result_name (current_file)
					current_file.put_character (';')
					current_file.put_new_line
				end
				dedent
				print_indentation
				current_file.put_character ('}')
				current_file.put_new_line
			end
			print_internal_routine_body_declaration (a_feature, l_result_type)
			if a_creation then
				print_indentation
				current_file.put_string (c_return)
				current_file.put_character (' ')
				if current_type.is_expanded then
					current_file.put_character ('*')
				end
				print_current_name (current_file)
				current_file.put_character (';')
			end
			print_feature_trace_message_call (False)
				--
				-- Clean up.
				--
			current_file := old_file
			reset_temp_variables
				-- Flush to file.
			flush_to_c_file
		end

	print_internal_routine_body_declaration (a_feature: ET_INTERNAL_ROUTINE_CLOSURE; a_result_type: ET_DYNAMIC_TYPE) is
			-- Print the local variables declaration, the compound and the
			-- rescue clause of `a_feature' to `current_file'.
		require
			a_feature_not_void: a_feature /= Void
		local
			l_locals: ET_LOCAL_VARIABLE_LIST
			i, nb: INTEGER
			l_name: ET_IDENTIFIER
			l_local_type_set: ET_DYNAMIC_TYPE_SET
			l_local_type: ET_DYNAMIC_TYPE
			l_rescue: ET_COMPOUND
			l_compound: ET_COMPOUND
			old_file: KI_TEXT_OUTPUT_STREAM
			old_call_info: STRING
			l_result_written_in_body: BOOLEAN
			l_result_read_in_body: BOOLEAN
			l_result_written_in_rescue: BOOLEAN
			l_result_read_in_rescue: BOOLEAN
		do
			old_file := current_file
			current_file := current_function_header_buffer
			old_call_info := current_call_info
				--
				-- Declaration of variables.
				--
				-- Variable for exception trace.
			if exception_trace_mode then
				print_indentation
				current_file.put_string (c_ge_call)
				current_file.put_character (' ')
				current_file.put_string (c_tc)
				current_file.put_character (' ')
				current_file.put_character ('=')
				current_file.put_character (' ')
				current_file.put_character ('{')
				current_file.put_character ('0')
				current_file.put_character (',')
				current_file.put_character ('0')
				current_file.put_character (',')
				current_file.put_string (c_ac)
				current_file.put_character ('}')
				current_file.put_character (';')
				current_file.put_new_line
				current_call_info := c_tc_address
			end
				-- Variable for rescue chain.
			l_rescue := a_feature.rescue_clause
			if l_rescue /= Void then
				print_indentation
				current_file.put_string (c_ge_rescue)
				current_file.put_character (' ')
				current_file.put_character ('r')
				current_file.put_character (';')
				current_file.put_new_line
			end
				--
				-- Instructions.
				--
			current_file := current_function_body_buffer
			reset_rescue_data
			locals_written := locals_written_in_rescue
			locals_read := locals_read_in_rescue
			if l_rescue /= Void then
				has_rescue := True
				print_indentation
				current_file.put_string (c_if)
				current_file.put_character (' ')
				current_file.put_character ('(')
				current_file.put_string (c_ge_setjmp)
				current_file.put_character ('(')
				current_file.put_character ('r')
				current_file.put_character ('.')
				current_file.put_character ('j')
				current_file.put_character ('b')
				current_file.put_character (')')
				current_file.put_character (' ')
				current_file.put_character ('!')
				current_file.put_character ('=')
				current_file.put_character (' ')
				current_file.put_character ('0')
				current_file.put_character (')')
				current_file.put_character (' ')
				current_file.put_character ('{')
				current_file.put_new_line
				indent
				print_compound (l_rescue)
				print_indentation
				current_file.put_string (c_ge_raise)
				current_file.put_character ('(')
				current_file.put_character ('8')
				current_file.put_character (')')
				current_file.put_character (';')
				current_file.put_new_line
				dedent
				print_indentation
				current_file.put_character ('}')
				current_file.put_new_line
				current_file.put_string (c_ge_retry)
				current_file.put_character (':')
				current_file.put_new_line
				print_indentation
				current_file.put_string ("r.previous = GE_last_rescue;")
				current_file.put_new_line
				print_indentation
				current_file.put_string ("GE_last_rescue = &r;")
				current_file.put_new_line
			end
			l_result_written_in_rescue := result_written
			l_result_read_in_rescue := result_read
			locals_written := locals_written_in_body
			locals_read := locals_read_in_body
			l_compound := a_feature.compound
			if l_compound /= Void then
				print_compound (l_compound)
			end
			l_result_written_in_body := result_written
			l_result_read_in_body := result_read
			if l_rescue /= Void then
				print_indentation
				current_file.put_string ("GE_last_rescue = r.previous;")
				current_file.put_new_line
			end
			if a_result_type /= Void then
					-- The 'Result' entity is always implicitly read in the body to return its value.
				l_result_read_in_body := True
				print_indentation
				current_file.put_string (c_return)
				current_file.put_character (' ')
				print_result_name (current_file)
				current_file.put_character (';')
				current_file.put_new_line
			end
				--
				-- Local variables and result declaration.
				--
			current_file := current_function_header_buffer
				-- Variable for 'Result' entity.
			if a_result_type /= Void then
				print_indentation
				if has_rescue and then (l_result_read_in_rescue or (has_retry and then l_result_read_in_body)) and then l_result_written_in_body then
						-- The implementation of the rescue mechanism in C uses 'setjmp'
						-- and 'longjmp'. The use of these two C functions requires that
						-- any local variable modified between the call to 'setjmp' and
						-- the call to 'longjmp' to be declared as 'volatile', otherwise its
						-- value may be lost after calling 'longjmp' if the C optimizer
						-- decided to implement it with 'register'. For more details, see:
						--  http://www.programmersheaven.com/articles/pathak/article1.htm
						--  http://www.freetype.org/david/reliable-c.html#annex-A
						--  http://msdn2.microsoft.com/en-us/library/xe7acxfb(VS.80).aspx
					current_file.put_string (c_volatile)
					current_file.put_character (' ')
				end
				print_type_declaration (a_result_type, current_file)
				current_file.put_character (' ')
				print_result_name (current_file)
				if not enable_locals_as_struct then
					current_file.put_character (' ')
					current_file.put_character ('=')
					current_file.put_character (' ')
					print_default_entity_value (a_result_type, current_file)
				end
				current_file.put_character (';')
				current_file.put_new_line
			end
				-- Local variables.
			l_locals := a_feature.locals
			if l_locals /= Void then
				nb := l_locals.count
				from i := 1 until i > nb loop
					l_name := l_locals.local_variable (i).name
					l_local_type_set := dynamic_type_set (l_name)
					l_local_type := l_local_type_set.static_type
					print_indentation
					if has_rescue and then (locals_read_in_rescue.has (l_name) or (has_retry and then locals_read_in_body.has (l_name))) and then locals_written_in_body.has (l_name) then
							-- The implementation of the rescue mechanism in C uses 'setjmp'
							-- and 'longjmp'. The use of these two C functions requires that
							-- any local variable modified between the call to 'setjmp' and
							-- the call to 'longjmp' to be declared as 'volatile', otherwise its
							-- value may be lost after calling 'longjmp' if the C optimizer
							-- decided to implement it with 'register'. For more details, see:
							--  http://www.programmersheaven.com/articles/pathak/article1.htm
							--  http://www.freetype.org/david/reliable-c.html#annex-A
							--  http://msdn2.microsoft.com/en-us/library/xe7acxfb(VS.80).aspx
						current_file.put_string (c_volatile)
						current_file.put_character (' ')
					end
					print_type_declaration (l_local_type, current_file)
					current_file.put_character (' ')
					print_local_name (l_name, current_file)
				if not enable_locals_as_struct then
						current_file.put_character (' ')
						current_file.put_character ('=')
						current_file.put_character (' ')
						print_default_entity_value (l_local_type, current_file)
				end
					current_file.put_character (';')
					current_file.put_new_line
					i := i + 1
				end
			end
				-- Clean up.
			reset_rescue_data
			current_call_info := old_call_info
			current_file := old_file
		end
