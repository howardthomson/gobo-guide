note
	description: "Directory Box"
	author: "Eugene Melekhov <eugene_melekhov@mail.ru>"
	copyright: "Copyright (c) 2002, Eugene Melekhov and others"
	license: "Eiffel Forum Freeware License v2 (see forum.txt)"
	status: "Mostly complete"

deferred class SB_DIR_BOX_DEF

inherit

	SB_TREE_LIST_BOX
		redefine
			make_opts,
         	handle_2,
         	on_changed,
         	on_command,
         	create_resource,
         	detach_resource,
         	destroy_resource,
         	destruct
      	end

	SB_IMAGE_CONSTANTS

feature -- Data

   directory: STRING;
         -- Current directory

feature -- Creation

	make_opts (p: SB_COMPOSITE; nvis: INTEGER; tgt: SB_MESSAGE_HANDLER; sel: INTEGER; opts: INTEGER;
				x, y, w, h, pl, pr, pt, pb: INTEGER)
			-- Construct tree list box
      	do
         	Precursor(p, nvis, tgt, sel, opts, x,y,w,h, pl,pr,pt,pb)
         	create { SB_GIF_ICON } foldericon	.make(application, folder)
        	create { SB_BMP_ICON } cdromicon	.make_opts(application, cdrom,		0, IMAGE_ALPHAGUESS, 1, 1)
        	create { SB_BMP_ICON } desktopicon	.make_opts(application, desktop,	0, IMAGE_ALPHAGUESS, 1, 1)
        	create { SB_BMP_ICON } harddiskicon	.make_opts(application, harddisk,	0, IMAGE_ALPHAGUESS, 1, 1)
        	create { SB_BMP_ICON } networkicon	.make_opts(application, networkdisk,0, IMAGE_ALPHAGUESS, 1, 1)
        	create { SB_BMP_ICON } floppyicon	.make_opts(application, floppy,		0, IMAGE_ALPHAGUESS, 1, 1)
        	create { SB_BMP_ICON } computericon	.make_opts(application, mycomputer,	0, IMAGE_ALPHAGUESS, 1, 1)
        	create { SB_BMP_ICON } nethoodicon	.make_opts(application, nethood,	0, IMAGE_ALPHAGUESS, 1, 1)
        	create { SB_BMP_ICON } zipdiskicon	.make_opts(application, zipdisk,	0, IMAGE_ALPHAGUESS, 1, 1)
        	create directory.make_empty
        	set_directory (PATHSEPSTRING)
      	end

feature

	set_directory(s: STRING)
		deferred
		end

feature -- Message processing

	handle_2 (sender: SB_MESSAGE_HANDLER; type, key: INTEGER; data: ANY): BOOLEAN
		do
        	if	   match_function_2 (SEL_CHANGED, 0,				type, key) then Result := on_changed				(sender,key,data)
        	elseif match_function_2 (SEL_COMMAND, 0,				type, key) then Result := on_command				(sender,key,data)
        	elseif match_function_2 (SEL_COMMAND, Id_setvalue,	  	type, key) then Result := on_cmd_set_value 			(sender,key,data)
        	elseif match_function_2 (SEL_COMMAND, Id_setstringvalue,type, key) then Result := on_cmd_set_string_value	(sender,key,data)
        	elseif match_function_2 (SEL_COMMAND, Id_getstringvalue,type, key) then Result := on_cmd_get_value			(sender,key,data)
        	else Result := Precursor (sender, type, key, data)
        	end
      	end

   	on_changed (sender: SB_MESSAGE_HANDLER; selector: INTEGER; data: ANY): BOOLEAN
      	local
         	it: SB_TREE_LIST_ITEM
      	do
         	it ?= data check it /= Void end
         	do_send (SEL_CHANGED, itempath(it))
         	Result := True
      	end

   	on_command (sender: SB_MESSAGE_HANDLER; selector: INTEGER; data: ANY): BOOLEAN
      	local
         	it: SB_TREE_LIST_ITEM
      	do
         	it ?= data check it /= Void end
         	directory := itempath(it)
         	remove_item (it.first_child)
         	do_send (SEL_COMMAND, directory)
			Result := True
		end

	on_cmd_set_value,on_cmd_set_string_value(sender: SB_MESSAGE_HANDLER; selector: INTEGER; data: ANY): BOOLEAN
		local
			str: STRING;
		do
			str ?= data check str /= Void end
			set_directory(str)
		end

	on_cmd_get_value (sender: SB_MESSAGE_HANDLER; selector: INTEGER; data: ANY): BOOLEAN
		local
			str: STRING
		do
			str ?= data check str /= Void end
			str.make_from_string(directory)
			Result := True
		end

feature -- Resource management

	create_resource
			-- Create server-side resources
		do
        	Precursor
        	foldericon	.create_resource
         	cdromicon	.create_resource
         	desktopicon	.create_resource
         	harddiskicon.create_resource
         	networkicon	.create_resource
         	floppyicon	.create_resource
         	computericon.create_resource
         	nethoodicon	.create_resource
         	zipdiskicon	.create_resource
		end

	detach_resource
    		-- Detach server-side resources
      	do
         	foldericon	.detach_resource
         	cdromicon	.detach_resource
         	desktopicon	.detach_resource
         	harddiskicon.detach_resource
         	networkicon	.detach_resource
         	floppyicon	.detach_resource
         	computericon.detach_resource
         	nethoodicon	.detach_resource
         	zipdiskicon	.detach_resource
         	Precursor
		end

   destroy_resource
         -- Destroy server-side resources
      do
         Precursor
      end

feature -- Destruction

	destruct
		do
			foldericon	.destruct;
         	cdromicon	.destruct;
         	desktopicon	.destruct;
         	harddiskicon.destruct;
         	networkicon	.destruct;
         	floppyicon	.destruct;
         	computericon.destruct;
         	nethoodicon	.destruct;
         	zipdiskicon	.destruct;
         	Precursor;
      	end

feature {NONE} -- Implementation

	-- Folder icons
	foldericon	: SB_ICON
	cdromicon	: SB_ICON
	desktopicon	: SB_ICON
	harddiskicon: SB_ICON
	networkicon	: SB_ICON
	floppyicon	: SB_ICON
	computericon: SB_ICON
	nethoodicon	: SB_ICON
	zipdiskicon	: SB_ICON

  itempath (it: SB_TREE_LIST_ITEM): STRING
      local
         itt: like it
      do
         create Result.make_empty
         if it /= Void then
            from
               itt := it
            until
               itt.parent = Void
            loop
               Result.prepend (itt.label);
               itt := itt.parent
               if itt.parent /= Void then Result.precede (PATHSEP) end
            end
            Result.prepend (itt.label)
         end
      end

	desktop: ARRAY [ INTEGER_8 ]
		once
			Result := <<
				0x42, 0x4D, 0xF6, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 
				0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 
				0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 
				0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 
				0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 
				0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 
				0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 
				0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x6C, 
				0x77, 0x77, 0x77, 0x7C, 0x6C, 0xC0, 0x6E, 0xC8, 
				0x88, 0x88, 0x88, 0x88, 0xC8, 0xC0, 0x6C, 0x88, 
				0x80, 0x78, 0x88, 0x88, 0x8C, 0x60, 0x68, 0xF8, 
				0x08, 0x07, 0x88, 0x88, 0x88, 0xC0, 0x7F, 0x80, 
				0x8F, 0x80, 0x78, 0x88, 0x88, 0x70, 0x7F, 0x08, 
				0xFF, 0xF8, 0x07, 0x88, 0x88, 0x70, 0x7F, 0x87, 
				0xFF, 0x0F, 0x80, 0x88, 0x88, 0x70, 0x7F, 0xF8, 
				0x7F, 0x33, 0x07, 0x88, 0x88, 0x70, 0x68, 0xFF, 
				0x87, 0x3B, 0x30, 0x78, 0x88, 0x40, 0x6C, 0x8F, 
				0xF8, 0x73, 0xB3, 0x07, 0x84, 0xC0, 0x66, 0xC8, 
				0xFF, 0x8F, 0x3B, 0x30, 0x48, 0xC0, 0x6E, 0x6C, 
				0x8F, 0xFF, 0xF3, 0xB3, 0x0C, 0xC0, 0x66, 0x66, 
				0x67, 0x77, 0x77, 0x3B, 0x30, 0x70, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xD3, 0x91, 0xDD, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0x11, 0xDD
			>>
		end

	mycomputer: ARRAY [ INTEGER_8 ]
		once
			Result := <<
				0x42, 0x4D, 0xF6, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 
				0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 
				0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 
				0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 
				0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 
				0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 
				0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 
				0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0xDD, 0xDD, 0x7F, 0xFF, 
				0xFF, 0xFF, 0xFF, 0xF8, 0x0D, 0xDD, 0xD7, 0x08, 
				0x08, 0x08, 0x08, 0x08, 0x00, 0xDD, 0xDD, 0x70, 
				0x70, 0x70, 0x70, 0x70, 0x77, 0x0D, 0xDD, 0x78, 
				0x88, 0x88, 0x88, 0x87, 0x87, 0x0D, 0xDD, 0xD7, 
				0x00, 0x00, 0x00, 0x00, 0x78, 0x0D, 0xDD, 0xD7, 
				0xF8, 0x88, 0x88, 0x87, 0x07, 0x7D, 0xDD, 0xD7, 
				0xF0, 0x77, 0x77, 0x87, 0x70, 0xDD, 0xDD, 0xD7, 
				0xF0, 0x66, 0x67, 0x87, 0x70, 0xDD, 0xDD, 0xD7, 
				0xF0, 0xE6, 0x67, 0x87, 0x70, 0xDD, 0xDD, 0xD7, 
				0xF0, 0x00, 0x00, 0x87, 0x70, 0xDD, 0xDD, 0xD7, 
				0xFF, 0xFF, 0xFF, 0x87, 0x70, 0xDD, 0xDD, 0xDD, 
				0x78, 0x88, 0x88, 0x88, 0x70, 0xDD, 0xDD, 0xDD, 
				0xD7, 0x77, 0x77, 0x77, 0x7D, 0xDD, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD
			>>
		end

	floppy: ARRAY [ INTEGER_8 ]
		once
			Result := <<
				0x42, 0x4D, 0xF6, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 
				0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 
				0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 
				0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 
				0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 
				0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 
				0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 
				0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xD0, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x0D, 0xDD, 0x77, 0x77, 
				0x77, 0x77, 0x77, 0x77, 0x70, 0xDD, 0x78, 0x88, 
				0xFF, 0xFF, 0x88, 0x88, 0x77, 0x0D, 0x78, 0x77, 
				0x00, 0x00, 0x77, 0x78, 0x77, 0x0D, 0x78, 0x88, 
				0x77, 0x77, 0x88, 0x88, 0x77, 0x0D, 0x78, 0x88, 
				0x88, 0x88, 0x88, 0x98, 0x77, 0x0D, 0x7F, 0xFF, 
				0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x0D, 0xD7, 0x88, 
				0x88, 0x88, 0x78, 0x70, 0x7F, 0x80, 0xDD, 0x77, 
				0x77, 0x77, 0x78, 0x77, 0x77, 0x80, 0xDD, 0xDD, 
				0xDD, 0xDD, 0x78, 0x88, 0x88, 0x80, 0xDD, 0xDD, 
				0xDD, 0xDD, 0x78, 0xFF, 0xFF, 0x80, 0xDD, 0xDD, 
				0xDD, 0xDD, 0x78, 0xFF, 0xFF, 0x80, 0xDD, 0xDD, 
				0xDD, 0xDD, 0x78, 0xFF, 0xFF, 0x00, 0xDD, 0xDD, 
				0xDD, 0xDD, 0x78, 0xFF, 0xFF, 0x80, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xD7, 0x77, 0x77, 0x7D
			>>
		end

	harddisk: ARRAY [ INTEGER_8 ]
		once
			Result := <<
				0x42, 0x4D, 0xF6, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 
				0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 
				0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 
				0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 
				0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 
				0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 
				0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 
				0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xD0, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0xDD, 0x77, 0x77, 
				0x77, 0x77, 0x77, 0x77, 0x77, 0x0D, 0x78, 0xFF, 
				0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0x70, 0x78, 0x77, 
				0x77, 0x77, 0x77, 0x77, 0x87, 0x70, 0x78, 0x88, 
				0x88, 0x88, 0x88, 0x88, 0x87, 0x70, 0x78, 0x88, 
				0x88, 0x88, 0x88, 0x82, 0x87, 0x70, 0x7F, 0xFF, 
				0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0x70, 0xD7, 0x88, 
				0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0xDD, 0x77, 
				0x77, 0x77, 0x77, 0x77, 0x77, 0x7D, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD
			>>
		end

	networkdisk: ARRAY [ INTEGER_8 ]
		once
			Result := <<
				0x42, 0x4D, 0xF6, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 
				0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 
				0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 
				0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 
				0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 
				0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 
				0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 
				0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 
				0xDD, 0x00, 0x00, 0xDD, 0xDD, 0xDD, 0x00, 0x00, 
				0x00, 0xBF, 0x30, 0x00, 0x00, 0x00, 0x88, 0x88, 
				0x88, 0x33, 0x30, 0x88, 0x88, 0x88, 0xDD, 0xDD, 
				0xDD, 0xD8, 0x0D, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 
				0xDD, 0xD0, 0x0D, 0xDD, 0xDD, 0xDD, 0xD0, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0xDD, 0x78, 0xFF, 
				0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0x0D, 0x78, 0x77, 
				0x77, 0x77, 0x77, 0x77, 0x87, 0x70, 0x78, 0x88, 
				0x88, 0x88, 0x88, 0x88, 0x87, 0x70, 0x78, 0x88, 
				0x88, 0x88, 0x88, 0x82, 0xA7, 0x70, 0x7F, 0xFF, 
				0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0x70, 0xD7, 0x88, 
				0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0xDD, 0x77, 
				0x77, 0x77, 0x77, 0x77, 0x77, 0x7D, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD
			>>
		end

	cdrom: ARRAY [ INTEGER_8 ]
		once
			Result := <<
				0x42, 0x4D, 0xF6, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 
				0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 
				0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 
				0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 
				0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 
				0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 
				0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 
				0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xD0, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0xDD, 0x77, 0x77, 
				0x77, 0x77, 0x77, 0x77, 0x77, 0x0D, 0x7F, 0x88, 
				0xFF, 0xFF, 0xF8, 0x88, 0x87, 0x0D, 0x7F, 0xA2, 
				0x00, 0x00, 0x00, 0x00, 0x87, 0x0D, 0x7F, 0x88, 
				0x88, 0x87, 0x78, 0x88, 0x00, 0x0D, 0x7F, 0xFF, 
				0xFF, 0x78, 0xF8, 0x88, 0xA7, 0x0D, 0xD7, 0x77, 
				0x77, 0x78, 0x8F, 0x88, 0xBE, 0x70, 0xDD, 0xDD, 
				0xD7, 0x88, 0x87, 0x07, 0xE8, 0x80, 0xDD, 0xDD, 
				0xD7, 0x88, 0xA0, 0xD0, 0x88, 0x80, 0xDD, 0xDD, 
				0xD7, 0x8A, 0xA7, 0x07, 0xF8, 0x80, 0xDD, 0xDD, 
				0xDD, 0x7A, 0xEB, 0xB8, 0x8F, 0x0D, 0xDD, 0xDD, 
				0xDD, 0x7E, 0xEB, 0xB8, 0x88, 0x0D, 0xDD, 0xDD, 
				0xDD, 0xD7, 0x7B, 0xB8, 0x77, 0xDD, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xD7, 0x77, 0xDD, 0xDD, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD
			>>
		end

	zipdisk: ARRAY [ INTEGER_8 ]
		once
			Result := <<
				0x42, 0x4D, 0xF6, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 
				0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 
				0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 
				0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 
				0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 
				0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 
				0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 
				0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xD0, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0xDD, 0x7F, 0x77, 
				0x77, 0x77, 0x77, 0x77, 0x77, 0x0D, 0x7F, 0x88, 
				0x88, 0x88, 0x88, 0x88, 0x87, 0x70, 0x7F, 0x88, 
				0x8F, 0xFF, 0xFF, 0xF8, 0x87, 0x70, 0x7F, 0x88, 
				0xF0, 0x00, 0x00, 0x0F, 0x87, 0x70, 0x7F, 0x98, 
				0x70, 0x00, 0x00, 0x07, 0x87, 0x70, 0x7F, 0x88, 
				0x88, 0x88, 0x88, 0x88, 0x87, 0x70, 0x7F, 0xFF, 
				0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0x70, 0xD7, 0x88, 
				0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0xDD, 0x77, 
				0x77, 0x77, 0x77, 0x77, 0x77, 0x7D, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 
				0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD
			>>
		end

	nethood: ARRAY [ INTEGER_8 ]
		once
			Result := <<
				0x42, 0x4D, 0xF6, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 
				0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 
				0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 
				0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 
				0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 
				0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 
				0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 
				0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 
				0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xDD, 0x00, 
				0xDD, 0xD0, 0x00, 0x00, 0x00, 0x0D, 0x00, 0xB3, 
				0x00, 0x78, 0xA7, 0x77, 0x77, 0x70, 0x77, 0xB3, 
				0x07, 0x7F, 0xFF, 0xFF, 0xFF, 0x70, 0xDD, 0x70, 
				0xDD, 0x70, 0x00, 0x00, 0x00, 0x70, 0xDD, 0x70, 
				0xDD, 0x78, 0x88, 0x88, 0x88, 0x0D, 0xD0, 0x00, 
				0x00, 0x7F, 0x07, 0x77, 0x78, 0x0D, 0x78, 0xA7, 
				0x77, 0x7F, 0x06, 0x66, 0x78, 0x0D, 0x7F, 0xFF, 
				0xFF, 0x7F, 0x0E, 0x66, 0x78, 0x0D, 0x70, 0x00, 
				0x00, 0x7F, 0x00, 0x00, 0x08, 0x0D, 0x78, 0x88, 
				0x88, 0x7F, 0xFF, 0xFF, 0xFF, 0x0D, 0x7F, 0x44, 
				0x44, 0x47, 0x77, 0x77, 0x77, 0x7D, 0x7F, 0x0C, 
				0xCC, 0x48, 0x0D, 0xDD, 0xDD, 0xDD, 0x7F, 0x0E, 
				0xCC, 0x48, 0x0D, 0xDD, 0xDD, 0xDD, 0x7F, 0x00, 
				0x00, 0x48, 0x0D, 0xDD, 0xDD, 0xDD, 0x7F, 0xFF, 
				0xFF, 0xFF, 0x0D, 0xDD, 0xDD, 0xDD, 0x67, 0x77, 
				0x77, 0x77, 0x7D, 0xDD, 0xDD, 0xDD
			>>
		end

	folder: ARRAY [ INTEGER_8 ]
		once
			Result := <<
				0x47, 0x49, 0x46, 0x38, 0x37, 0x61, 0x10, 0x00, 
				0x10, 0x00, 0xF2, 0x00, 0x00, 0xB2, 0xC0, 0xDC, 
				0x80, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 
				0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 
				0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x03, 
				0x3B, 0x08, 0xBA, 0xDC, 0x1B, 0x10, 0x3A, 0x16, 
				0xC4, 0xB0, 0x22, 0x4C, 0x50, 0xAF, 0xCF, 0x91, 
				0xC4, 0x15, 0x64, 0x69, 0x92, 0x01, 0x31, 0x7E, 
				0xAC, 0x95, 0x8E, 0x58, 0x7B, 0xBD, 0x41, 0x21, 
				0xC7, 0x74, 0x11, 0xEF, 0xB3, 0x5A, 0xDF, 0x9E, 
				0x1C, 0x6F, 0x97, 0x03, 0xBA, 0x7C, 0xA1, 0x64, 
				0x48, 0x05, 0x20, 0x38, 0x9F, 0x50, 0xE8, 0x66, 
				0x4A, 0x75, 0x24, 0x00, 0x00, 0x3B
			>>
		end



end
